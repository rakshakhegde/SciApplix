/*
 * Created on 2 Nov, 2012, 5:51:45 PM by Rakshak R.Hegde
 */
package Fractals;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.JPanel;

/**
 *
 * @author Rakshak.R.Hegde
 */
public class SierpinskiTriangle extends javax.swing.JFrame {

    boolean colorWhite = true;

    public SierpinskiTriangle() {
        initComponents();
        ((Painter) painter).initialize();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painter = new Painter();
        toggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sierpinski Triangle");
        setResizable(false);

        painter.setBackground(new Color(255, 255, 255));

        toggleButton.setText("Toggle Color");
        toggleButton.setToolTipText("Change the color from black/white to white/black");
        toggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painterLayout = new javax.swing.GroupLayout(painter);
        painter.setLayout(painterLayout);
        painterLayout.setHorizontalGroup(
            painterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toggleButton)
                .addContainerGap(497, Short.MAX_VALUE))
        );
        painterLayout.setVerticalGroup(
            painterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(472, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void toggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleButtonActionPerformed
    colorWhite = !colorWhite;
    repaint();
}//GEN-LAST:event_toggleButtonActionPerformed

    public static void main(String args[]) {
        new SierpinskiTriangle();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel painter;
    private javax.swing.JToggleButton toggleButton;
    // End of variables declaration//GEN-END:variables

    class Painter extends JPanel {

        int width, height, limit = 5, mouseX, mouseY;
        Graphics2D g2d;
        GradientPaint gradient1, gradient2;

        public void initialize() {
            width = getWidth();
            height = getHeight();
            gradient1 = new GradientPaint(0, 0, Color.black, 0, height, new Color(100, 100, 100));
            gradient2 = new GradientPaint(0, 0, Color.white, 0, height, Color.LIGHT_GRAY);

            addMouseMotionListener(new MouseMotionAdapter() {

                @Override
                public void mouseMoved(MouseEvent e) {
                    super.mouseMoved(e);
                    mouseX = e.getX();
                    mouseY = e.getY();
                    if ((int) ((float) mouseY / height * 10f) != limit) {
                        limit = (Math.round((float) mouseY / height * 10f));
                        repaint();
                    }
                }
            });
        }

        public void refresh() {
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setStroke(new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            if (colorWhite) {
                g2d.setPaint(gradient2);
                g2d.fillRect(0, 0, width, height);
                g2d.setColor(Color.black);
            } else {
                g2d.setPaint(gradient1);
                g2d.fillRect(0, 0, width, height);
                g2d.setColor(Color.white);
            }
            render(width / 2, 0, width, height - 2, 0, height - 2, limit);
        }

        public void render(int x1, int y1, int x2, int y2, int x3, int y3, int step) {
            g2d.drawLine(x1, y1, x2, y2);
            g2d.drawLine(x2, y2, x3, y3);
            g2d.drawLine(x3, y3, x1, y1);
            if (--step > 0) {
                // Top Triangle
                render(x1, y1, (x1 + x2) / 2, (y1 + y2) / 2, (x3 + x1) / 2, (y3 + y1) / 2, step);
                // Bottom-Right Triangle
                render((x1 + x2) / 2, (y1 + y2) / 2, x2, y2, (x2 + x3) / 2, y3, step);
                // Bottom-Left Triangle
                render((x1 + x3) / 2, (y1 + y3) / 2, (x3 + x2) / 2, y2, x3, y3, step);
            }
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g2d = (Graphics2D) g;
            refresh();
        }
    }
}