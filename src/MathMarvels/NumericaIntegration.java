package MathMarvels;

import java.io.*;
import javax.script.*;
import javax.swing.*;
import javax.swing.text.html.HTMLEditorKit;
import static java.lang.Math.*;

/**
 *
 * @author Rakshak.R.Hegde
 */
public class NumericaIntegration extends JFrame {

    ScriptEngineManager factory = new ScriptEngineManager();
    ScriptEngine engine = factory.getEngineByName("JavaScript");
    Compilable compilable = (Compilable) engine;
    CompiledScript compiledScript;
    String expression = "pow(x, 2)", N = "10000", x1 = "0", x2 = "3";
    JDialog functionsDialog;

    /**
     * Creates new form Numerical_Integration
     */
    public NumericaIntegration() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        evaluate();
    }

    public void evaluate() {
        String script = "N = " + N + ";"
                + "x1 = " + x1 + ";"
                + "x2 = " + x2 + ";"
                + "sign = 1;"
                + "if(x1 > x2) { temp = x1; x1 = x2; x2 = temp; sign = -1; }"
                + "dx = (x2 - x1) / N;"
                + "sum = 0;"
                + "for(x = x1+dx; x < x2; x += dx) { sum +=  f(x); }"
                + "sum *= 2;"
                + "sum += f(x1) + f(x2);"
                + "integral = sign * dx * sum / 2;"
                + "function f(x) { return " + expression + "; }"
                + "function abs(x) { return Math.abs(x); }"
                + "function acos(x) { return Math.acos(x); }"
                + "function asin(x) { return Math.asin(x); }"
                + "function atan(x) { return Math.atan(x); }"
                + "function cbrt(x) { return Math.pow(x, 1/3); }"
                + "function cos(x) { return Math.cos(x); }"
                + "function cosec(x) { return 1/Math.sin(x); }"
                + "function cot(x) { return 1/Math.tan(x); }"
                + "function ln(x) { return Math.log(x); }"
                + "function log10(x) { return Math.log(x)/Math.LN10; }"
                + "function log(n, x) { return Math.log(x)/Math.log(n); }"
                + "function pow(x, n) { return Math.pow(x, n); }"
                + "function radians(x) { return x*Math.PI/180; }"
                + "function sec(x) { return 1/Math.cos(x); }"
                + "function sin(x) { return Math.sin(x); }"
                + "function sqrt(x) { return Math.sqrt(x); }"
                + "function tan(x) { return Math.tan(x); }";
        try {
            compiledScript = compilable.compile(script);
            compiledScript.eval();
            resultLabel.setText(((Double) engine.get("integral")).floatValue() + "");
        } catch (ScriptException e) {
            resultLabel.setText("Invalid!!! Try Again with no spaces...");
            System.out.println("Exception = " + e);
        }
        java.awt.Toolkit.getDefaultToolkit().beep();
        System.gc();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        expressionField = new JTextField();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        lowerLimitField = new JTextField();
        upperLimitField = new JTextField();
        jLabel4 = new JLabel();
        noOfStepsField = new JTextField();
        resultLabel = new JLabel();
        estimateButton = new JButton();
        helpButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Numerical Integration");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(BorderFactory.createTitledBorder("Input Panel"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Expression F(x) =");

        expressionField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        expressionField.setText(expression);
        expressionField.setToolTipText("Enter the expression in terms of x");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Lower Limit");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Upper Limit");

        lowerLimitField.setColumns(7);
        lowerLimitField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lowerLimitField.setText(x1);

        upperLimitField.setColumns(7);
        upperLimitField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        upperLimitField.setText(x2);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Number of Steps");

        noOfStepsField.setColumns(7);
        noOfStepsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noOfStepsField.setText(N);

        resultLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resultLabel.setBorder(BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Result of Integration"));

        estimateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        estimateButton.setText("Estimate");
        estimateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estimateButtonActionPerformed(evt);
            }
        });

        helpButton.setIcon(new ImageIcon(getClass().getResource("/help.png"))); // NOI18N
        helpButton.setMnemonic('h');
        helpButton.setToolTipText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpButton))
                    .addGroup(GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(expressionField))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(lowerLimitField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(upperLimitField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(noOfStepsField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(estimateButton, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE))
                            .addComponent(resultLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(expressionField, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lowerLimitField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(upperLimitField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(noOfStepsField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(estimateButton)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultLabel, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(helpButton)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void estimateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estimateButtonActionPerformed
        expression = formatExpression(expressionField.getText().toLowerCase());
        N = formatExpression(noOfStepsField.getText().toLowerCase());
        x1 = formatExpression(lowerLimitField.getText().toLowerCase());
        x2 = formatExpression(upperLimitField.getText().toLowerCase());
        evaluate();
    }//GEN-LAST:event_estimateButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        if (functionsDialog == null) {
            functionsDialog = new JDialog(this, "Reference");
            JTextPane textPane = new JTextPane();
            textPane.setEditable(false);
            textPane.setEditorKit(new HTMLEditorKit());
            functionsDialog.add(new JScrollPane(textPane));
            try {
                java.net.URL URL = getClass().getResource("/Help Files/Numerical Integration Reference.html");
                DataInputStream input = new DataInputStream(URL.openStream());
                byte b[] = new byte[input.available()];
                input.read(b);
                textPane.setText(new String(b));
                b = null;
                input.close();
            } catch (Exception ex) {
                textPane.setText("Functions Viewer Under Repair :(");
                System.out.println(ex);
            }
            functionsDialog.setSize(600, 500);
        }
        functionsDialog.setVisible(true);
    }//GEN-LAST:event_helpButtonActionPerformed

    public String formatExpression(String expression) {
        expression = expression.replaceAll("pi", PI + "");
        expression = expression.replaceAll("e", E + "");
        return expression;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NumericaIntegration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NumericaIntegration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NumericaIntegration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NumericaIntegration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        new NumericaIntegration();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton estimateButton;
    private JTextField expressionField;
    private JButton helpButton;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JPanel jPanel1;
    private JTextField lowerLimitField;
    private JTextField noOfStepsField;
    private JLabel resultLabel;
    private JTextField upperLimitField;
    // End of variables declaration//GEN-END:variables
}