package MathMarvels;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import static java.lang.Math.*;

/**
 * @author Rakshak.R.Hegde
 */
public class PrimeFrequency extends JFrame {

    boolean isPrime;
    boolean drawXAxis = true, drawYAxis = true;
    boolean drawXNumbers = true, drawYNumbers = true;
    int width, height, n;
    int gap = 60, transX, transY;
    int xMinS, xMaxS, yMinS, yMaxS; // S --> Screen
    long xMinG, xMaxG, yMinG, yMaxG, classIntG; // G --> Graph
    int noOfClasses = 10, classInterval = 10, lowerLimit = 0, upperLimit = lowerLimit + noOfClasses * classInterval;
    long sqrt, i, j;
    float classMark, radiusPoint = 2;
    float x, y, mouseX, mouseY;
    int frequency[];
    Color whiteColor = new Color(252, 252, 252);
    String classNames[] = {"Class Intervals", "Frequency"};
    DefaultTableModel tableModel = new DefaultTableModel();
    Object object[][];
    JFileChooser fileChooser = new JFileChooser();
    Font bigFont = new Font(Font.SANS_SERIF, Font.BOLD, 14), smallFont = new Font(Font.SANS_SERIF, Font.PLAIN, 10);
    BasicStroke thinStroke = new BasicStroke(1), thickStroke = new BasicStroke(2);
    FileNameExtensionFilter gifFilter = new FileNameExtensionFilter("GIF (*.gif)", "gif");
    FileNameExtensionFilter pngFilter = new FileNameExtensionFilter("PNG (*.png)", "png");
    SwingWorker worker;
    Timer timer = new Timer(30, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    progressBar.setValue((int) ((i - lowerLimit) * 100F / (noOfClasses * classInterval)));
                }
            });
        }
    });

    public PrimeFrequency() {
        fileChooser.addChoosableFileFilter(gifFilter);
        fileChooser.setFileFilter(pngFilter);
        fileChooser.setPreferredSize(new Dimension(600, 400));
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        lowerLimitField = new JTextField();
        jLabel2 = new JLabel();
        noOfClassesField = new JTextField();
        jLabel3 = new JLabel();
        xAxisCheck = new JCheckBox();
        xNumbersCheck = new JCheckBox();
        plotButton = new JButton();
        saveButton = new JButton();
        yAxisCheck = new JCheckBox();
        yNumbersCheck = new JCheckBox();
        classIntervalField = new JTextField();
        radiusSlider = new JSlider();
        jSplitPane1 = new JSplitPane();
        jPanel3 = new JPanel();
        progressBar = new JProgressBar();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        painter = new Painter();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prime Frequency Finder");

        jPanel1.setBackground(new Color(250, 250, 0));
        jPanel1.setBorder(BorderFactory.createTitledBorder("Control Panel"));

        jLabel1.setText("Lower Limit");

        lowerLimitField.setColumns(8);
        lowerLimitField.setText("0");

        jLabel2.setText("Number Of Classes");

        noOfClassesField.setColumns(8);
        noOfClassesField.setText("10");

        jLabel3.setText("Class Interval");

        xAxisCheck.setSelected(true);
        xAxisCheck.setText("Display X-Axis");
        xAxisCheck.setOpaque(false);
        xAxisCheck.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                xAxisCheckActionPerformed(evt);
            }
        });

        xNumbersCheck.setSelected(true);
        xNumbersCheck.setText("Display X-Numbers");
        xNumbersCheck.setOpaque(false);
        xNumbersCheck.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                xNumbersCheckActionPerformed(evt);
            }
        });

        plotButton.setText("Plot");
        plotButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        yAxisCheck.setSelected(true);
        yAxisCheck.setText("Display Y-Axis");
        yAxisCheck.setOpaque(false);
        yAxisCheck.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                yAxisCheckActionPerformed(evt);
            }
        });

        yNumbersCheck.setSelected(true);
        yNumbersCheck.setText("Display Y-Numbers");
        yNumbersCheck.setOpaque(false);
        yNumbersCheck.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                yNumbersCheckActionPerformed(evt);
            }
        });

        classIntervalField.setText("10");

        radiusSlider.setMaximum(6);
        radiusSlider.setMinimum(1);
        radiusSlider.setValue(4);
        radiusSlider.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                radiusSliderMouseReleased(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerLimitField, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noOfClassesField, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classIntervalField, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(xAxisCheck, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xNumbersCheck))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(yAxisCheck)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yNumbersCheck)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(plotButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(radiusSlider, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lowerLimitField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(noOfClassesField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(classIntervalField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(xAxisCheck)
                            .addComponent(xNumbersCheck))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(yAxisCheck)
                            .addComponent(yNumbersCheck))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(plotButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radiusSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel3.setBackground(new Color(255, 255, 255));
        jPanel3.setBorder(BorderFactory.createTitledBorder("Frequency Table"));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(tableModel);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setEnabled(false);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        painter.setBackground(whiteColor);
        painter.setBorder(BorderFactory.createTitledBorder("Frequency Plotter"));

        GroupLayout painterLayout = new GroupLayout(painter);
        painter.setLayout(painterLayout);
        painterLayout.setHorizontalGroup(
            painterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
        );
        painterLayout.setVerticalGroup(
            painterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 455, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(painter);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void xAxisCheckActionPerformed(ActionEvent evt) {//GEN-FIRST:event_xAxisCheckActionPerformed
        drawXAxis = xAxisCheck.isSelected();
        repaint();
    }//GEN-LAST:event_xAxisCheckActionPerformed

    private void xNumbersCheckActionPerformed(ActionEvent evt) {//GEN-FIRST:event_xNumbersCheckActionPerformed
        drawXNumbers = xNumbersCheck.isSelected();
        repaint();
    }//GEN-LAST:event_xNumbersCheckActionPerformed

    private void plotButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        worker = new SwingWorker<Object, Void>() {

            @Override
            protected Object doInBackground() {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                // Setting the values for Prime Search
                noOfClasses = (int) abs(Double.parseDouble(noOfClassesField.getText()));
                noOfClassesField.setText(noOfClasses + "");
                classInterval = (int) abs(Double.parseDouble(classIntervalField.getText()));
                classIntervalField.setText(classInterval + "");
                lowerLimit = (int) abs(Double.parseDouble(lowerLimitField.getText()));
                lowerLimitField.setText(lowerLimit + "");
                upperLimit = lowerLimit + classInterval * noOfClasses;

                xMinS = 0;
                xMaxS = width - gap;
                yMinS = 0;
                yMaxS = transY;
                xMinG = lowerLimit;
                xMaxG = upperLimit;
                yMinG = 0;
                yMaxG = classInterval / 2 + 2;

                timer.start();
                ((Painter) painter).primeAlgorithm();
                repaint();
                timer.stop();
                progressBar.setValue(0);
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                System.gc();
                return 0;
            }
        };
        worker.execute();
    }//GEN-LAST:event_plotButtonActionPerformed

    private void yAxisCheckActionPerformed(ActionEvent evt) {//GEN-FIRST:event_yAxisCheckActionPerformed
        drawYAxis = yAxisCheck.isSelected();
        repaint();
    }//GEN-LAST:event_yAxisCheckActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fileChooser.setDialogTitle("Save As...");
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file.exists()) {
                int result = JOptionPane.showConfirmDialog(this, file.getName() + " already exists.\nDo you want to replace it?", "Confirm Save As", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    saveImage(file);
                }
            } else {
                saveImage(file);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public void saveImage(File file) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        paintPrimes(g2d);
        try {
            if (fileChooser.getFileFilter() == pngFilter) {
                ImageIO.write(image, "png", file);
            } else {
//                g2d.setColor(Color.WHITE);
//                g2d.fillRect(-gap, 0, width, height);
                ImageIO.write(image, "gif", file);
            }
        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Could not save " + file.getName(), "File Not Rendered", JOptionPane.ERROR_MESSAGE);
        }
    }

    public synchronized void paintPrimes(Graphics2D g2d) {
        transX = gap;
        transY = painter.getHeight() - gap;
        xMinS = 0;
        xMaxS = painter.getWidth() - gap;
        yMinS = 0;
        yMaxS = transY;
        xMinG = lowerLimit;
        xMaxG = upperLimit;
        yMinG = 0;
        yMaxG = classInterval / 2 + 2;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.translate(transX, transY);
        g2d.scale(1, -1);

        // Axes
        g2d.setColor(Color.BLACK);
        g2d.setStroke(thickStroke);
        g2d.drawLine(0, -gap, 0, transY);
        g2d.drawLine(-gap, 0, width - gap, 0);
        g2d.setFont(smallFont);

        for (classMark = xMinG + classInterval / 2F, n = 0; classMark < upperLimit; classMark += classInterval) {
            x = map(classMark, xMinG, xMaxG, xMinS, xMaxS);
            y = map(frequency[n++], yMinG, yMaxG, yMinS, yMaxS);

            g2d.setColor(Color.BLACK);
            if (drawXAxis) {
                g2d.setStroke(thinStroke);
                g2d.drawLine((int) x, - 3, (int) x, 3);
                g2d.setStroke(thickStroke);
            }
            if (drawXNumbers) {
                g2d.scale(1, -1);
                g2d.drawString("" + classMark, x, 20);
                g2d.scale(1, -1);
            }
            g2d.setColor(Color.RED);
            g2d.fillOval((int) (x - radiusPoint), (int) (y - radiusPoint), (int) (2 * radiusPoint), (int) (2 * radiusPoint));

        }

        g2d.setColor(Color.BLACK);
        g2d.setStroke(thinStroke);
        if (drawYAxis) {
            for (n = 0; n <= classInterval / 2 + 2; n++) {
                y = map(n, yMinG, yMaxG, yMinS, yMaxS);
                g2d.drawLine(-3, (int) y, 3, (int) y);
            }
        }
        if (drawYNumbers) {
            g2d.scale(1, -1);
            for (n = 0; n <= classInterval / 2 + 2; n++) {
                y = map(n, yMinG, yMaxG, yMinS, yMaxS);
                g2d.drawString(n + "", -20, -y + 4);
            }
            g2d.scale(1, -1);
        }

        // Text
        g2d.scale(1, -1);
        g2d.setFont(bigFont);
        g2d.drawString("Class Mark →", width / 2 - 80, 40);
        g2d.rotate(-PI / 2, -40, -(height / 2 - 50));
        g2d.drawString("Frequency →", -40, -(height / 2 - 50));

        // Reverting back transforms
        g2d.rotate(PI / 2, -40, -(height / 2 - 50));
        g2d.translate(-transX, -transY);
    }

    private float map(float val, float src1, float src2, float dest1, float dest2) {
        float norm = (val - src1) / (src2 - src1);
        float lerp = norm * (dest2 - dest1) + dest1;
        return lerp;
    }
    private void yNumbersCheckActionPerformed(ActionEvent evt) {//GEN-FIRST:event_yNumbersCheckActionPerformed
        drawYNumbers = yNumbersCheck.isSelected();
        repaint();
    }//GEN-LAST:event_yNumbersCheckActionPerformed

    private void radiusSliderMouseReleased(MouseEvent evt) {//GEN-FIRST:event_radiusSliderMouseReleased
        radiusPoint = radiusSlider.getValue() / 2F;
        repaint();
    }//GEN-LAST:event_radiusSliderMouseReleased

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
        }
        new PrimeFrequency();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField classIntervalField;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JSplitPane jSplitPane1;
    private JTable jTable1;
    private JTextField lowerLimitField;
    private JTextField noOfClassesField;
    private JPanel painter;
    private JButton plotButton;
    private JProgressBar progressBar;
    private JSlider radiusSlider;
    private JButton saveButton;
    private JCheckBox xAxisCheck;
    private JCheckBox xNumbersCheck;
    private JCheckBox yAxisCheck;
    private JCheckBox yNumbersCheck;
    // End of variables declaration//GEN-END:variables

    class Painter extends JPanel {

        Graphics2D g2d;

        public Painter() {
            setBackground(new Color(252, 252, 252));
            primeAlgorithm();
        }

        @Override
        protected synchronized void paintComponent(Graphics g) {
            super.paintComponent(g);
            width = getWidth();
            height = getHeight();
            g2d = (Graphics2D) g;
            paintPrimes(g2d);
        }

        public synchronized void primeAlgorithm() {
            frequency = new int[noOfClasses];
            object = new Object[noOfClasses][2];
            isPrime = true;
            if (lowerLimit == 2) {
                frequency[0]++;
            }
            for (n = 0; n < noOfClasses; n++) {
                i = lowerLimit + n * classInterval;
                object[n][0] = i + " - " + (lowerLimit + (n + 1) * classInterval);
                i += i % 2 == 0 ? 1 : 0;
                while (i < lowerLimit + (n + 1) * classInterval) {
                    sqrt = (long) sqrt(i);
                    isPrime = true;
                    for (j = 3; j <= sqrt; j += 2) {
                        if (i % j == 0) {
                            isPrime = false;
                            break;
                        }
                    }
                    if (isPrime) {
                        frequency[n]++;
                    }
                    i += 2;
                }
                object[n][1] = frequency[n];
            }
            tableModel.setDataVector(object, classNames);
        }
    }
}
