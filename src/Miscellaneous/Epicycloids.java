/*
 * Created on 2 Nov, 2012, 11:31:20 AM by Rakshak R.Hegde
 */
package Miscellaneous;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.swing.*;
import static java.lang.Math.*;

/**
 *
 * @author Rakshak.R.Hegde
 */
public class Epicycloids extends JFrame {

    boolean repaint = true;
    Timer timer;

    public Epicycloids() {
        initComponents();
        ((Painter) painter).initialize();
        setVisible(true);
        KeyAdapter keyAdapter = new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    repaintEverything();
                }
            }
        };
        noOfPointsField.addKeyListener(keyAdapter);
        pointGapField.addKeyListener(keyAdapter);
        radiusField.addKeyListener(keyAdapter);
        timeField.addKeyListener(keyAdapter);
        drawButton.addKeyListener(keyAdapter);
        playButton.addKeyListener(keyAdapter);

        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                timer.stop();
            }
        });

        timer = new Timer(100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                repaint = true;
                repaint();
            }
        });
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painter = new Painter();
        inputPanel = new JPanel();
        jLabel1 = new JLabel();
        noOfPointsField = new JTextField();
        jLabel2 = new JLabel();
        pointGapField = new JTextField();
        jLabel3 = new JLabel();
        timeField = new JTextField();
        jLabel4 = new JLabel();
        radiusField = new JTextField();
        drawButton = new JButton();
        playButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Epicycloids");
        setBackground(new Color(255, 255, 255));
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        painter.setBackground(new Color(255, 255, 255));

        GroupLayout painterLayout = new GroupLayout(painter);
        painter.setLayout(painterLayout);
        painterLayout.setHorizontalGroup(
            painterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        painterLayout.setVerticalGroup(
            painterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );

        inputPanel.setBackground(new Color(255, 255, 10));
        inputPanel.setBorder(BorderFactory.createTitledBorder("Input Parameter Panel"));

        jLabel1.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Number of Points");

        noOfPointsField.setText("180");
        noOfPointsField.setToolTipText("Set the total number of points in the circle");

        jLabel2.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Coefficient");

        pointGapField.setText("3");
        pointGapField.setToolTipText("Set the number of point to skip");

        jLabel3.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Time Interval");

        timeField.setText("100");
        timeField.setToolTipText("Set the time interval in milliseconds");

        jLabel4.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Radius");

        radiusField.setText("250");
        radiusField.setToolTipText("Set the radius of the circle");

        drawButton.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        drawButton.setText("Draw");
        drawButton.setToolTipText("Draw the cusp diagram again");
        drawButton.setOpaque(false);
        drawButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        playButton.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        playButton.setText("Pause");
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        GroupLayout inputPanelLayout = new GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noOfPointsField, GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pointGapField, GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeField, GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radiusField, GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addGroup(inputPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(drawButton, GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(playButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(inputPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(noOfPointsField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(radiusField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(timeField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(pointGapField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(drawButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(playButton, GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)))
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(inputPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painter, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painter, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void drawButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
    repaintEverything();
    timer.start();
}//GEN-LAST:event_drawButtonActionPerformed

    private void repaintEverything() {
        if (painter.getWidth() != width || painter.getHeight() != height) {
            width = painter.getWidth();
            height = painter.getHeight();
            image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            g2d = image.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.translate(width / 2, height / 2);
            g2d.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        }
        g2d.setColor(Color.white);
        g2d.fillRect(-width / 2, -height / 2, width, height);
        currPoint = 0;
        try {
            noOfPoints = (int) Float.parseFloat(noOfPointsField.getText());
            noOfPointsField.setText(noOfPoints + "");
            radInterval = toRadians(360.0 / noOfPoints);
            pointInterval = (int) Float.parseFloat(pointGapField.getText());
            pointGapField.setText(pointInterval + "");
            timer.setDelay((int) Float.parseFloat(timeField.getText()));
            timeField.setText(timer.getDelay() + "");
            pRadian = 0;
            radius = (int) Float.parseFloat(radiusField.getText());
            playButton.setText("Pause");
        } catch (Exception e) {
            playButton.setText("Invalid!");
        }
    }
private void playButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    if (playButton.getText().contentEquals("Play")) {
        playButton.setText("Pause");
        timer.start();
    } else {
        playButton.setText("Play");
        timer.stop();
    }
}//GEN-LAST:event_playButtonActionPerformed

    public static void main(String args[]) {
        new Epicycloids();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton drawButton;
    private JPanel inputPanel;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JTextField noOfPointsField;
    private JPanel painter;
    private JButton playButton;
    private JTextField pointGapField;
    private JTextField radiusField;
    private JTextField timeField;
    // End of variables declaration//GEN-END:variables
    int noOfPoints = 180, radius = 250;
    int width, height;
    int currPoint, loopPoint, pointInterval = 3;
    double pRadian, radian, radInterval = toRadians(360.0 / noOfPoints);
    Graphics2D g2d, g2dg;
    BufferedImage image;

    class Painter extends JPanel {

        public void initialize() {
            width = getWidth();
            height = getHeight();

            image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            g2d = image.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            g2d.translate(width / 2, height / 2);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            g2dg = (Graphics2D) g;
            g2dg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            if (repaint) {
                pRadian = radInterval * currPoint;
                radian = radInterval * (pointInterval * ++currPoint);
                g2d.setColor(Color.red);
                g2d.drawLine((int) (cos(pRadian) * radius), (int) (sin(pRadian) * radius), (int) (cos(radian) * radius), (int) (sin(radian) * radius));
            }
            g2dg.translate(getWidth() / 2, getHeight() / 2);
            g2dg.drawImage(image, -image.getWidth() / 2, -image.getHeight() / 2, null);

            for (loopPoint = 1; loopPoint <= noOfPoints; loopPoint++) {
                radian = radInterval * loopPoint;
                g2dg.fillOval((int) (cos(radian) * radius - 2), (int) (sin(radian) * radius - 2), 5, 5);
            }
            repaint = false;
        }
    }
}