package Mechanics;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.plaf.LayerUI;


/*
 * This program helps to see the projectiles of an object projected at all
 * angles from 0-90 degrees
 *
 * @author Rakshak.R.Hegde
 */
public class EnvelopeOfProjectiles extends javax.swing.JFrame {

    long delay = 1000; // Time In milliseconds
    float initVel = 60; // Initial Velocity
    float angleInterval = (float) Math.toRadians(15);
    float minAngle = (float) Math.toRadians(0);
    float maxAngle = (float) Math.toRadians(90), accG = 9.8f;
    float theta = minAngle, range, x, y, px, py;
    float scaleX = 1f, scaleY = 1f;
    BufferedImage image;
    Graphics2D g2d;
    boolean contPaint = true, drawProjectile = true;
    boolean confirmPaint = true, drawEnvelope, drawPeak, frameAlive = true;
    int width, height;
    float transX, transY;

    /**
     * Creates new form Envelope_Parabola
     */
    public EnvelopeOfProjectiles() {
        initComponents();
        ((Painter) painter).initialize();
        setTitle("Envelope of Projectiles");
        setSize(900, 700);
        setVisible(true);
        inputPanel.setBackground(Color.YELLOW);

        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                frameAlive = false;
                System.gc();
            }
        });
        new Thread() {

            public void run() {
                while (frameAlive) {
                    try {
                        Thread.sleep(50);
                    } catch (Exception e) {
                    }
                    repaint();
                }
            }
        }.start();
        while (frameAlive) {
            confirmPaint = true;
            if (theta >= maxAngle) {
                drawProjectile = false;
            }
            repaint();
            try {
                Thread.sleep(delay);
            } catch (Exception e) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        painter = new Painter();
        inputPanel = new JPanel();
        maxAngField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        plotButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        minAngField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        timeIntField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        scaleXField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        scaleYField = new javax.swing.JTextField();
        envelopeCheck = new javax.swing.JCheckBox();
        angIntField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        initVelField = new javax.swing.JTextField();
        heightsCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        
        painter.setBorder(javax.swing.BorderFactory.createTitledBorder("Rendering Panel"));
        javax.swing.GroupLayout painterLayout = new javax.swing.GroupLayout(painter);
        painter.setLayout(painterLayout);
        painterLayout.setHorizontalGroup(
                painterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 1000, Short.MAX_VALUE));
        painterLayout.setVerticalGroup(
                painterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 552, Short.MAX_VALUE));

        maxAngField.setFont(new Font("Tahoma", 0, 12));
        maxAngField.setText("90");
        maxAngField.setToolTipText("Enter the maximum angle at which the projectile should stop being projected");
        maxAngField.setDoubleBuffered(true);

        jLabel1.setFont(new Font("Tahoma", 1, 12));
        jLabel1.setText("Max Angle");

        plotButton.setFont(new Font("Tahoma", 1, 12));
        plotButton.setText("Plot");
        plotButton.setToolTipText("Starts the projectiles from the beginning");
        plotButton.setDoubleBuffered(true);
        plotButton.setOpaque(false);
        plotButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new Font("Tahoma", 1, 12));
        jLabel2.setText("Min Angle");

        minAngField.setFont(new Font("Tahoma", 0, 12));
        minAngField.setText("0");
        minAngField.setToolTipText("Enter the minimum angle at which the projectile should start shooting");
        minAngField.setDoubleBuffered(true);

        jLabel3.setFont(new Font("Tahoma", 1, 12));
        jLabel3.setText("Angle Interval");

        jLabel4.setFont(new Font("Tahoma", 1, 12));
        jLabel4.setText("Time Interval");

        timeIntField.setFont(new Font("Tahoma", 0, 12));
        timeIntField.setText("1000");
        timeIntField.setToolTipText("Enter the time interval between each projectile");
        timeIntField.setDoubleBuffered(true);

        jLabel5.setFont(new Font("Tahoma", 1, 12));
        jLabel5.setText("Scale X");

        scaleXField.setFont(new Font("Tahoma", 0, 12));
        scaleXField.setText("1");
        scaleXField.setToolTipText("Enter the scale along the x-axis");
        scaleXField.setDoubleBuffered(true);

        jLabel6.setFont(new Font("Tahoma", 1, 12));
        jLabel6.setText("Scale Y");

        scaleYField.setFont(new Font("Tahoma", 0, 12));
        scaleYField.setText("1");
        scaleYField.setToolTipText("Enter the scale along the y-axis");
        scaleYField.setDoubleBuffered(true);

        envelopeCheck.setFont(new Font("Tahoma", 1, 12));
        envelopeCheck.setText("Show Envelope");
        envelopeCheck.setToolTipText("Check/Uncheck to show/hide the envelope");
        envelopeCheck.setDoubleBuffered(true);
        envelopeCheck.setOpaque(false);

        angIntField.setFont(new Font("Tahoma", 0, 12));
        angIntField.setText("15");
        angIntField.setToolTipText("Enter the angle interval between each projectile");
        angIntField.setDoubleBuffered(true);

        jLabel7.setFont(new Font("Tahoma", 1, 12));
        jLabel7.setText("Initial Velocity");

        initVelField.setFont(new Font("Tahoma", 0, 12));
        initVelField.setText("60");
        initVelField.setToolTipText("Enter the initial velocity at which the projectile should be projected");
        initVelField.setDoubleBuffered(true);

        heightsCheck.setFont(new Font("Tahoma", 1, 12));
        heightsCheck.setText("Show Peaks");
        heightsCheck.setToolTipText("Check/Uncheck to show/hide the peak of every projectile");
        heightsCheck.setDoubleBuffered(true);
        heightsCheck.setOpaque(false);

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Parameter Panel"));
        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
                inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGap(32, 32, 32).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGap(9, 9, 9).addComponent(jLabel4).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(timeIntField, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)).addGroup(inputPanelLayout.createSequentialGroup().addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(angIntField, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))).addGap(18, 18, 18).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel5).addComponent(jLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(scaleXField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE).addComponent(minAngField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)).addGap(18, 18, 18).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabel6).addComponent(jLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(scaleYField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE).addComponent(maxAngField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)).addGap(27, 27, 27).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(inputPanelLayout.createSequentialGroup().addGap(12, 12, 12).addComponent(jLabel7).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(initVelField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)).addGroup(inputPanelLayout.createSequentialGroup().addComponent(heightsCheck).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(envelopeCheck))).addGap(30, 30, 30).addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(34, 34, 34)));
        inputPanelLayout.setVerticalGroup(
                inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addContainerGap().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(maxAngField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(11, 11, 11).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(scaleYField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel6))).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(minAngField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2)).addGap(11, 11, 11).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(scaleXField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(angIntField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(11, 11, 11).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(timeIntField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(inputPanelLayout.createSequentialGroup().addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel7).addComponent(initVelField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(11, 11, 11).addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(envelopeCheck).addComponent(heightsCheck))).addGroup(inputPanelLayout.createSequentialGroup().addGap(12, 12, 12).addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap(14, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(painter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(inputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(painter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>

    private void plotButtonActionPerformed(ActionEvent evt) {
        // Reading Inputs from Lightweight Toolkit
        initVel = (float) Float.parseFloat(initVelField.getText());
        angleInterval = (float) Math.toRadians(Float.parseFloat(angIntField.getText()));
        theta = (float) Math.toRadians(Float.parseFloat(minAngField.getText()));
        maxAngle = (float) Math.toRadians(Float.parseFloat(maxAngField.getText()));
        delay = Long.parseLong(timeIntField.getText());
        scaleX = Float.parseFloat(scaleXField.getText());
        scaleY = Float.parseFloat(scaleYField.getText());
        drawEnvelope = envelopeCheck.isSelected();
        drawPeak = heightsCheck.isSelected();
        drawProjectile = true;
        contPaint = true;
        imageInitialize();
    }

    private void imageInitialize() {
        width = painter.getWidth();
        height = painter.getHeight();
        image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        transX = width / 2f;
        transY = height - 75;
        g2d.translate(transX, transY);
        g2d.setStroke(new BasicStroke(1f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        g2d.scale(scaleX, scaleY);
        // Drawing the axes
        g2d.setColor(Color.black);
        g2d.drawLine(0, (int) -transY * 2, 0, (int) (height - transY) * 2);
        g2d.drawLine((int) -transX * 4, 0, (int) (transX) * 4, 0);
    }

    public static void main(String args[]) {
        new EnvelopeOfProjectiles();
    }
    // Variables declaration - do not modify
    private javax.swing.JTextField angIntField;
    private javax.swing.JCheckBox envelopeCheck;
    private javax.swing.JCheckBox heightsCheck;
    private javax.swing.JTextField initVelField;
    private JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField maxAngField;
    private javax.swing.JTextField minAngField;
    private JPanel painter;
    private javax.swing.JButton plotButton;
    private javax.swing.JTextField scaleXField;
    private javax.swing.JTextField scaleYField;
    private javax.swing.JTextField timeIntField;
    // End of variables declaration

    class Painter extends JPanel {

        double px, py;
        int mouseX, mouseY;

        public void initialize() {
            setBackground(Color.white);
            addMouseMotionListener(new MouseAdapter() {

                @Override
                public void mouseMoved(MouseEvent e) {
                    super.mouseMoved(e);
                    mouseX = e.getX();
                    mouseY = e.getY();
                }
            });
            imageInitialize();
            System.out.println("Width = " + width + "; Height = " + height);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (confirmPaint && contPaint) {
                if (drawProjectile) {
                    px = 0;
                    py = 0;
                    range = (float) (initVel * initVel * Math.sin(2 * theta) / accG);

                    for (x = 0; x <= range; x++) {
                        y = (float) (-x * Math.tan(theta) + accG * Math.pow(x / (initVel * Math.cos(theta)), 2) / 2);
                        g2d.setColor(Color.red);
                        g2d.drawLine((int) px, (int) py, (int) x, (int) y);
                        g2d.drawLine((int) -px, (int) py, (int) -(px = x), (int) (py = y));
                    }

                    if (drawPeak) {
                        g2d.setColor(Color.black);
                        y = (float) (-0.5 * (initVel * initVel * Math.pow(Math.sin(theta), 2) / accG));
                        g2d.fillOval((int) (x = (range / 2f) - 2), (int) y - 2, 4, 4);
                        g2d.fillOval((int) -x, (int) y - 2, 4, 4);
                    }

                    theta += angleInterval;
                } else if (drawEnvelope) {
                    g2d.setColor(Color.blue);
                    range = initVel * initVel / accG;
                    for (x = 0; x <= range; x += 2) {
                        y = (float) (-0.5 * (initVel * initVel / accG - accG * x * x / (initVel * initVel)));
                        g2d.fillOval((int) x - 1, (int) y - 1, 3, 3);
                        g2d.fillOval((int) -x - 1, (int) y - 1, 3, 3);
                    }
                    contPaint = false;
                }
            }
            confirmPaint = false;
            g.drawImage(image, getWidth() / 2 - image.getWidth() / 2, getHeight() / 2 - image.getHeight() / 2, null);
            g.drawString("Mouse Coordinates (" + (mouseX - getWidth() / 2) + ", " + -(mouseY - (getHeight() / 2 + image.getHeight() - 75 - image.getHeight() / 2)) + ")", 20, 40);
        }
    }
}